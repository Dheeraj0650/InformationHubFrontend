var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import ElevationStyles from './styles/elevation-styles';
import BorderColors from './styles/border-colors';
import LayerAppearances from './styles/layer-appearances';

var ElevationPropType = PropTypes.oneOf(ElevationStyles.map(function (_, index) {
  return index;
}));

var StringAndBoolPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.bool]);

var Pane = function (_PureComponent) {
  _inherits(Pane, _PureComponent);

  function Pane() {
    _classCallCheck(this, Pane);

    return _possibleConstructorReturn(this, (Pane.__proto__ || Object.getPrototypeOf(Pane)).apply(this, arguments));
  }

  _createClass(Pane, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          elevation = _props.elevation,
          hoverElevation = _props.hoverElevation,
          activeElevation = _props.activeElevation,
          border = _props.border,
          borderTop = _props.borderTop,
          borderRight = _props.borderRight,
          borderBottom = _props.borderBottom,
          borderLeft = _props.borderLeft,
          _props$css = _props.css,
          css = _props$css === undefined ? {} : _props$css,
          props = _objectWithoutProperties(_props, ['appearance', 'elevation', 'hoverElevation', 'activeElevation', 'border', 'borderTop', 'borderRight', 'borderBottom', 'borderLeft', 'css']);

      var appearanceStyle = {};
      if (Object.prototype.hasOwnProperty.call(LayerAppearances, appearance)) {
        appearanceStyle = LayerAppearances[appearance];
      }

      var elevationStyle = void 0;
      if (Number.isInteger(elevation)) {
        elevationStyle = ElevationStyles[elevation];
      }

      var hoverElevationStyle = {};
      if (Number.isInteger(hoverElevation)) {
        hoverElevationStyle = {
          transitionDuration: '150ms',
          transitionProperty: 'box-shadow, transform',
          transitionTimingFunction: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
          ':hover': _extends({}, css[':hover'] || {}, {
            transform: 'translateY(-2px)',
            boxShadow: ElevationStyles[hoverElevation]
          })
        };
      }

      var activeElevationStyle = {};
      if (Number.isInteger(activeElevation)) {
        activeElevationStyle = {
          ':active': _extends({}, css[':active'] || {}, {
            transform: 'translateY(-1px)',
            boxShadow: ElevationStyles[activeElevation]
          })
        };
      }

      var _map = [borderTop, borderRight, borderBottom, borderLeft].map(function (borderSideProperty) {
        if (Object.prototype.hasOwnProperty.call(BorderColors, borderSideProperty)) {
          return '1px solid ' + BorderColors[borderSideProperty];
        } else if (borderSideProperty === true) {
          // Use default, which is now muted, border color when explicitly a true boolean
          return '1px solid ' + BorderColors.muted;
        } else if (Object.prototype.hasOwnProperty.call(BorderColors, border)) {
          return '1px solid ' + BorderColors[border];
        } else if (border === true) {
          return '1px solid ' + BorderColors.muted;
        }

        return borderSideProperty;
      }),
          _map2 = _slicedToArray(_map, 4),
          _borderTop = _map2[0],
          _borderRight = _map2[1],
          _borderBottom = _map2[2],
          _borderLeft = _map2[3];

      return React.createElement(Box, _extends({
        borderTop: _borderTop,
        borderRight: _borderRight,
        borderBottom: _borderBottom,
        borderLeft: _borderLeft,
        boxShadow: elevationStyle
      }, appearanceStyle, {
        css: _extends({}, css, hoverElevationStyle, activeElevationStyle)
      }, props));
    }
  }]);

  return Pane;
}(PureComponent);

Pane.propTypes = _extends({}, Box.propTypes, {

  appearance: PropTypes.oneOf(Object.keys(LayerAppearances)),

  elevation: ElevationPropType,
  hoverElevation: ElevationPropType,
  activeElevation: ElevationPropType,

  // Enable to set a boolean for a default border
  borderTop: StringAndBoolPropType,
  borderRight: StringAndBoolPropType,
  borderBottom: StringAndBoolPropType,
  borderLeft: StringAndBoolPropType
});
export default Pane;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,