var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { dimensions, spacing, position, layout } from 'ui-box';
import { Autocomplete } from '../../autocomplete';
import { TextInput } from '../../text-input';
import { IconButton } from '../../buttons';

var Combobox = function (_PureComponent) {
  _inherits(Combobox, _PureComponent);

  function Combobox(props, context) {
    _classCallCheck(this, Combobox);

    var _this = _possibleConstructorReturn(this, (Combobox.__proto__ || Object.getPrototypeOf(Combobox)).call(this, props, context));

    _this.handleStateChange = function (changes) {
      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {
        if (!changes.isOpen) {
          _this.setState({ isOpenedByButton: false });
        }
      }
    };

    _this.state = {
      isOpenedByButton: false
    };
    return _this;
  }

  _createClass(Combobox, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          selectedItem = _props.selectedItem,
          defaultSelectedItem = _props.defaultSelectedItem,
          itemToString = _props.itemToString,
          width = _props.width,
          appearance = _props.appearance,
          height = _props.height,
          onChange = _props.onChange,
          inputProps = _props.inputProps,
          buttonProps = _props.buttonProps,
          openOnFocus = _props.openOnFocus,
          autocompleteProps = _props.autocompleteProps,
          props = _objectWithoutProperties(_props, ['items', 'selectedItem', 'defaultSelectedItem', 'itemToString', 'width', 'appearance', 'height', 'onChange', 'inputProps', 'buttonProps', 'openOnFocus', 'autocompleteProps']);

      return React.createElement(
        Autocomplete,
        _extends({
          items: items,
          selectedItem: selectedItem,
          defaultSelectedItem: defaultSelectedItem,
          itemToString: itemToString,
          onChange: onChange,
          onStateChange: this.handleStateChange,
          isFilterDisabled: this.state.isOpenedByButton
        }, autocompleteProps),
        function (_ref) {
          var key = _ref.key,
              getRef = _ref.getRef,
              isOpen = _ref.isOpen,
              openMenu = _ref.openMenu,
              inputValue = _ref.inputValue,
              getInputProps = _ref.getInputProps,
              getButtonProps = _ref.getButtonProps,
              clearSelection = _ref.clearSelection;
          return React.createElement(
            Box,
            _extends({
              key: key,
              innerRef: function innerRef(ref) {
                return getRef(ref);
              },
              display: 'inline-flex',
              width: width
            }, props),
            React.createElement(TextInput, _extends({
              width: 0,
              flex: 1,
              height: height,
              value: inputValue,
              borderTopRightRadius: 0,
              borderBottomRightRadius: 0
            }, getInputProps(_extends({}, inputProps, {
              onFocus: function onFocus() {
                if (openOnFocus) openMenu();
              },
              onChange: function onChange(e) {
                if (_this2.state.isOpenedByButton) {
                  _this2.setState({
                    isOpenedByButton: false
                  });
                }
                if (e.target.value.trim() === '') {
                  // Prevent the selected item from sticking around
                  clearSelection();
                }
              }
            })))),
            React.createElement(IconButton, _extends({
              iconAim: isOpen ? 'up' : 'down',
              color: 'muted',
              icon: 'triangle',
              appearance: appearance,
              height: height,
              marginLeft: -1,
              paddingLeft: 0,
              paddingRight: 0,
              borderTopLeftRadius: 0,
              borderBottomLeftRadius: 0
            }, getButtonProps(_extends({}, buttonProps, {
              onClick: function onClick() {
                if (!isOpen) {
                  _this2.setState({ isOpenedByButton: true });
                }
              }
            }))))
          );
        }
      );
    }
  }]);

  return Combobox;
}(PureComponent);

Combobox.propTypes = _extends({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {
  items: PropTypes.array.isRequired,
  selectedItem: PropTypes.any,
  defaultSelectedItem: PropTypes.any,
  itemToString: PropTypes.func,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  height: PropTypes.number,
  onChange: PropTypes.func,
  inputProps: PropTypes.object,
  buttonProps: PropTypes.object,
  openOnFocus: PropTypes.bool,
  autocompleteProps: PropTypes.object
});
Combobox.defaultProps = {
  openOnFocus: false,
  width: 224
};
export default Combobox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21ib2JveC9zcmMvQ29tYm9ib3guanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiQm94IiwiZGltZW5zaW9ucyIsInNwYWNpbmciLCJwb3NpdGlvbiIsImxheW91dCIsIkF1dG9jb21wbGV0ZSIsIlRleHRJbnB1dCIsIkljb25CdXR0b24iLCJDb21ib2JveCIsInByb3BzIiwiY29udGV4dCIsImhhbmRsZVN0YXRlQ2hhbmdlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY2hhbmdlcyIsImlzT3BlbiIsInNldFN0YXRlIiwiaXNPcGVuZWRCeUJ1dHRvbiIsInN0YXRlIiwiaXRlbXMiLCJzZWxlY3RlZEl0ZW0iLCJkZWZhdWx0U2VsZWN0ZWRJdGVtIiwiaXRlbVRvU3RyaW5nIiwid2lkdGgiLCJhcHBlYXJhbmNlIiwiaGVpZ2h0Iiwib25DaGFuZ2UiLCJpbnB1dFByb3BzIiwiYnV0dG9uUHJvcHMiLCJvcGVuT25Gb2N1cyIsImF1dG9jb21wbGV0ZVByb3BzIiwia2V5IiwiZ2V0UmVmIiwib3Blbk1lbnUiLCJpbnB1dFZhbHVlIiwiZ2V0SW5wdXRQcm9wcyIsImdldEJ1dHRvblByb3BzIiwiY2xlYXJTZWxlY3Rpb24iLCJyZWYiLCJvbkZvY3VzIiwiZSIsInRhcmdldCIsInZhbHVlIiwidHJpbSIsIm9uQ2xpY2siLCJwcm9wVHlwZXMiLCJhcnJheSIsImlzUmVxdWlyZWQiLCJhbnkiLCJmdW5jIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwib2JqZWN0IiwiYm9vbCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsR0FBUCxJQUFjQyxVQUFkLEVBQTBCQyxPQUExQixFQUFt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IkNvbWJvYm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3gsIHsgZGltZW5zaW9ucywgc3BhY2luZywgcG9zaXRpb24sIGxheW91dCB9IGZyb20gJ3VpLWJveCdcbmltcG9ydCB7IEF1dG9jb21wbGV0ZSB9IGZyb20gJy4uLy4uL2F1dG9jb21wbGV0ZSdcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uLy4uL3RleHQtaW5wdXQnXG5pbXBvcnQgeyBJY29uQnV0dG9uIH0gZnJvbSAnLi4vLi4vYnV0dG9ucydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYm9ib3ggZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAuLi5kaW1lbnNpb25zLnByb3BUeXBlcyxcbiAgICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcbiAgICAuLi5wb3NpdGlvbi5wcm9wVHlwZXMsXG4gICAgLi4ubGF5b3V0LnByb3BUeXBlcyxcbiAgICBpdGVtczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRJdGVtOiBQcm9wVHlwZXMuYW55LFxuICAgIGRlZmF1bHRTZWxlY3RlZEl0ZW06IFByb3BUeXBlcy5hbnksXG4gICAgaXRlbVRvU3RyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBidXR0b25Qcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvcGVuT25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgYXV0b2NvbXBsZXRlUHJvcHM6IFByb3BUeXBlcy5vYmplY3RcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgb3Blbk9uRm9jdXM6IGZhbHNlLFxuICAgIHdpZHRoOiAyMjRcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzT3BlbmVkQnlCdXR0b246IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3RhdGVDaGFuZ2UgPSBjaGFuZ2VzID0+IHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNoYW5nZXMsICdpc09wZW4nKSkge1xuICAgICAgaWYgKCFjaGFuZ2VzLmlzT3Blbikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNPcGVuZWRCeUJ1dHRvbjogZmFsc2UgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXRlbXMsXG4gICAgICBzZWxlY3RlZEl0ZW0sXG4gICAgICBkZWZhdWx0U2VsZWN0ZWRJdGVtLFxuICAgICAgaXRlbVRvU3RyaW5nLFxuICAgICAgd2lkdGgsXG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgaGVpZ2h0LFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgYnV0dG9uUHJvcHMsXG4gICAgICBvcGVuT25Gb2N1cyxcbiAgICAgIGF1dG9jb21wbGV0ZVByb3BzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdXRvY29tcGxldGVcbiAgICAgICAgaXRlbXM9e2l0ZW1zfVxuICAgICAgICBzZWxlY3RlZEl0ZW09e3NlbGVjdGVkSXRlbX1cbiAgICAgICAgZGVmYXVsdFNlbGVjdGVkSXRlbT17ZGVmYXVsdFNlbGVjdGVkSXRlbX1cbiAgICAgICAgaXRlbVRvU3RyaW5nPXtpdGVtVG9TdHJpbmd9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb25TdGF0ZUNoYW5nZT17dGhpcy5oYW5kbGVTdGF0ZUNoYW5nZX1cbiAgICAgICAgaXNGaWx0ZXJEaXNhYmxlZD17dGhpcy5zdGF0ZS5pc09wZW5lZEJ5QnV0dG9ufVxuICAgICAgICB7Li4uYXV0b2NvbXBsZXRlUHJvcHN9XG4gICAgICA+XG4gICAgICAgIHsoe1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBnZXRSZWYsXG4gICAgICAgICAgaXNPcGVuLFxuICAgICAgICAgIG9wZW5NZW51LFxuICAgICAgICAgIGlucHV0VmFsdWUsXG4gICAgICAgICAgZ2V0SW5wdXRQcm9wcyxcbiAgICAgICAgICBnZXRCdXR0b25Qcm9wcyxcbiAgICAgICAgICBjbGVhclNlbGVjdGlvblxuICAgICAgICB9KSA9PiAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICBpbm5lclJlZj17cmVmID0+IGdldFJlZihyZWYpfVxuICAgICAgICAgICAgZGlzcGxheT1cImlubGluZS1mbGV4XCJcbiAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgICAgIHdpZHRoPXswfVxuICAgICAgICAgICAgICBmbGV4PXsxfVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWV9XG4gICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzPXswfVxuICAgICAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1cz17MH1cbiAgICAgICAgICAgICAgey4uLmdldElucHV0UHJvcHMoe1xuICAgICAgICAgICAgICAgIC4uLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgb25Gb2N1czogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKG9wZW5PbkZvY3VzKSBvcGVuTWVudSgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogZSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc09wZW5lZEJ5QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGlzT3BlbmVkQnlCdXR0b246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBzZWxlY3RlZCBpdGVtIGZyb20gc3RpY2tpbmcgYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgIGljb25BaW09e2lzT3BlbiA/ICd1cCcgOiAnZG93bid9XG4gICAgICAgICAgICAgIGNvbG9yPVwibXV0ZWRcIlxuICAgICAgICAgICAgICBpY29uPVwidHJpYW5nbGVcIlxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgICAgbWFyZ2luTGVmdD17LTF9XG4gICAgICAgICAgICAgIHBhZGRpbmdMZWZ0PXswfVxuICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ9ezB9XG4gICAgICAgICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM9ezB9XG4gICAgICAgICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM9ezB9XG4gICAgICAgICAgICAgIHsuLi5nZXRCdXR0b25Qcm9wcyh7XG4gICAgICAgICAgICAgICAgLi4uYnV0dG9uUHJvcHMsXG4gICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFpc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzT3BlbmVkQnlCdXR0b246IHRydWUgfSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKX1cbiAgICAgIDwvQXV0b2NvbXBsZXRlPlxuICAgIClcbiAgfVxufVxuIl19