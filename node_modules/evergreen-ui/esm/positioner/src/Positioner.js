var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import objectValues from 'object-values';
import Transition from 'react-transition-group/Transition';
import { Portal } from '../../portal';

var PositionerSides = {
  BOTTOM: 'bottom',
  TOP: 'top'
};

var animationEasing = {
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};

var initialState = function initialState() {
  return {
    top: null,
    left: null,
    side: null,
    transformOriginX: null
  };
};

var getCSS = function getCSS(_ref) {
  var targetOffset = _ref.targetOffset,
      initialScale = _ref.initialScale,
      animationDuration = _ref.animationDuration;
  return {
    position: 'absolute',
    opacity: 0,
    transition: 'all ' + animationDuration + 'ms ' + animationEasing.spring,
    transform: 'scale(' + initialScale + ') translateY(-1px)',
    '&[data-state="entering"][data-position="bottom"], &[data-state="entered"][data-position="bottom"]': {
      opacity: 1,
      visibility: 'visible',
      transform: 'scale(1) translateY(' + targetOffset + 'px)'
    },
    '&[data-state="entering"][data-position="top"], &[data-state="entered"][data-position="top"]': {
      opacity: 1,
      visibility: 'visible',
      transform: 'scale(1) translateY(-' + targetOffset + 'px)'
    },
    '&[data-state="exiting"]': {
      opacity: 0,
      transform: 'scale(1) translateY(0)'
    }
  };
};

var Positioner = function (_PureComponent) {
  _inherits(Positioner, _PureComponent);

  function Positioner(props, context) {
    _classCallCheck(this, Positioner);

    var _this = _possibleConstructorReturn(this, (Positioner.__proto__ || Object.getPrototypeOf(Positioner)).call(this, props, context));

    _this.getAnchors = function () {
      var targetRect = _this.props.targetRect;

      var bodyRect = document.body.getBoundingClientRect();
      var x = targetRect.left + targetRect.width / 2;
      return {
        top: {
          x: x,
          y: targetRect.top - bodyRect.top
        },
        bottom: {
          x: x,
          y: targetRect.bottom - bodyRect.top
        }
      };
    };

    _this.getRef = function (ref) {
      _this.positionerRef = ref;
      _this.props.innerRef(ref);
    };

    _this.handleEnter = function () {
      var _this$props = _this.props,
          useSmartPositioning = _this$props.useSmartPositioning,
          bodyOffset = _this$props.bodyOffset;

      var _this$getAnchors = _this.getAnchors(),
          top = _this$getAnchors.top,
          bottom = _this$getAnchors.bottom;

      var side = _this.props.side;

      // Smartly position the positioner when it overflows the body
      var viewportHeight = document.documentElement.clientHeight + window.scrollY;
      var viewportWidth = document.documentElement.clientWidth + window.scrollX;

      if (useSmartPositioning && _this.positionerRef.offsetHeight + bottom.y > viewportHeight) {
        side = 'top';
      }

      _this.positionerRef.setAttribute('data-position', side);

      var left = Math.max(bottom.x - _this.positionerRef.offsetWidth / 2, bodyOffset);
      left = Math.min(left, viewportWidth - _this.positionerRef.offsetWidth - bodyOffset);

      var transformOriginX = bottom.x - left;
      transformOriginX = Math.max(transformOriginX - bodyOffset, bottom.x - left);

      _this.setState({
        left: left,
        side: side,
        transformOriginX: transformOriginX,
        top: side === PositionerSides.BOTTOM ? bottom.y : top.y - _this.positionerRef.offsetHeight
      });
    };

    _this.handleExited = function () {
      _this.setState(initialState());
    };

    _this.state = initialState();
    return _this;
  }

  _createClass(Positioner, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          zIndex = _props.zIndex,
          isShown = _props.isShown,
          targetRect = _props.targetRect,
          initialScale = _props.initialScale,
          targetOffset = _props.targetOffset,
          animationDuration = _props.animationDuration;
      var _state = this.state,
          left = _state.left,
          top = _state.top,
          side = _state.side,
          transformOriginX = _state.transformOriginX;


      var transformOrigin = transformOriginX + 'px ' + (side === PositionerSides.BOTTOM ? 'top' : 'bottom');

      return React.createElement(
        Portal,
        null,
        React.createElement(
          Transition,
          {
            'in': isShown,
            timeout: animationDuration,
            onEnter: this.handleEnter,
            onExited: this.handleExited,
            unmountOnExit: true
          },
          function (state) {
            return children({
              top: top,
              left: left,
              side: side,
              state: state,
              zIndex: zIndex,
              css: getCSS({ targetOffset: targetOffset, initialScale: initialScale, animationDuration: animationDuration }),
              style: {
                left: left,
                top: top,
                transformOrigin: transformOrigin,
                zIndex: zIndex
              },
              getRef: _this2.getRef,
              targetRect: targetRect,
              transformOrigin: transformOrigin,
              animationDuration: animationDuration
            });
          }
        )
      );
    }
  }]);

  return Positioner;
}(PureComponent);

Positioner.propTypes = {
  side: PropTypes.oneOf(objectValues(PositionerSides)),
  zIndex: PropTypes.number,
  isShown: PropTypes.bool,
  children: PropTypes.func,
  innerRef: PropTypes.func,
  bodyOffset: PropTypes.number,
  targetRect: PropTypes.object,
  targetOffset: PropTypes.number,
  initialScale: PropTypes.number,
  animationDuration: PropTypes.number,
  useSmartPositioning: PropTypes.bool
};
Positioner.defaultProps = {
  innerRef: function innerRef() {},
  side: PositionerSides.BOTTOM,
  zIndex: 40,
  bodyOffset: 4,
  targetOffset: 8,
  initialScale: 0.9,
  animationDuration: 300,
  useSmartPositioning: true
};
export default Positioner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,