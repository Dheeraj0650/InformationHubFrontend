var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { colors } from '../../colors';

var IconColors = {
  default: colors.neutral['200A'],
  disabled: colors.neutral['50A'],
  muted: colors.neutral['60A'],
  selected: colors.blue['500'],
  white: colors.white['500']
};

var IconAim = {
  none: null,
  top: '0deg',
  up: '0deg',
  right: '90deg',
  bottom: '180deg',
  down: '180deg',
  left: '270deg'
};

var Icon = function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          aim = _props.aim,
          transform = _props.transform,
          size = _props.size,
          iconSize = _props.iconSize,
          children = _props.children,
          colorProp = _props.color,
          props = _objectWithoutProperties(_props, ['aim', 'transform', 'size', 'iconSize', 'children', 'color']);

      var color = colorProp;
      if (Object.prototype.hasOwnProperty.call(IconColors, color)) {
        color = IconColors[color];
      }

      var totalTransform = transform || '';
      if (aim) {
        totalTransform = (totalTransform + ' rotate(' + IconAim[aim] + ')').trim();
      }

      return React.createElement(
        Box,
        _extends({ transform: totalTransform, height: size, width: size }, props),
        React.createElement(
          Box,
          {
            is: 'span',
            width: iconSize,
            height: iconSize,
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: color
          },
          children
        )
      );
    }
  }]);

  return Icon;
}(PureComponent);

Icon.propTypes = _extends({}, Box.propTypes, {
  aim: PropTypes.oneOf(Object.keys(IconAim)).isRequired,
  size: PropTypes.number,
  iconSize: PropTypes.number
});
Icon.defaultProps = {
  color: 'default',
  aim: 'none',
  is: 'span',
  display: 'inline-flex',
  alignItems: 'center',
  justifyContent: 'center',
  size: 32,
  iconSize: 16
};
export default Icon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbi5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJCb3giLCJjb2xvcnMiLCJJY29uQ29sb3JzIiwiZGVmYXVsdCIsIm5ldXRyYWwiLCJkaXNhYmxlZCIsIm11dGVkIiwic2VsZWN0ZWQiLCJibHVlIiwid2hpdGUiLCJJY29uQWltIiwibm9uZSIsInRvcCIsInVwIiwicmlnaHQiLCJib3R0b20iLCJkb3duIiwibGVmdCIsIkljb24iLCJwcm9wcyIsImFpbSIsInRyYW5zZm9ybSIsInNpemUiLCJpY29uU2l6ZSIsImNoaWxkcmVuIiwiY29sb3JQcm9wIiwiY29sb3IiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ0b3RhbFRyYW5zZm9ybSIsInRyaW0iLCJwcm9wVHlwZXMiLCJvbmVPZiIsImtleXMiLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwiZGVmYXVsdFByb3BzIiwiaXMiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFFBQWhCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixjQUF2Qjs7QUFFQSxJQUFNQyxhQUFhO0FBQ2pCQyxXQUFTRixPQUFPRyxPQUFQLENBQWUsTUFBZixDQURRO0FBRWpCQyxZQUFVSixPQUFPRyxPQUFQLENBQWUsS0FBZixDQUZPO0FBR2pCRSxTQUFPTCxPQUFPRyxPQUFQLENBQWUsS0FBZixDQUhVO0FBSWpCRyxZQUFVTixPQUFPTyxJQUFQLENBQVksS0FBWixDQUpPO0FBS2pCQyxTQUFPUixPQUFPUSxLQUFQLENBQWEsS0FBYjtBQUxVLENBQW5COztBQVFBLElBQU1DLFVBQVU7QUFDZEMsUUFBTSxJQURRO0FBRWRDLE9BQUssTUFGUztBQUdkQyxNQUFJLE1BSFU7QUFJZEMsU0FBTyxPQUpPO0FBS2RDLFVBQVEsUUFMTTtBQU1kQyxRQUFNLFFBTlE7QUFPZEMsUUFBTTtBQVBRLENBQWhCOztJQVVxQkMsSTs7Ozs7Ozs7Ozs7NkJBbUJWO0FBQUEsbUJBU0gsS0FBS0MsS0FURjtBQUFBLFVBRUxDLEdBRkssVUFFTEEsR0FGSztBQUFBLFVBR0xDLFNBSEssVUFHTEEsU0FISztBQUFBLFVBSUxDLElBSkssVUFJTEEsSUFKSztBQUFBLFVBS0xDLFFBTEssVUFLTEEsUUFMSztBQUFBLFVBTUxDLFFBTkssVUFNTEEsUUFOSztBQUFBLFVBT0VDLFNBUEYsVUFPTEMsS0FQSztBQUFBLFVBUUZQLEtBUkU7O0FBV1AsVUFBSU8sUUFBUUQsU0FBWjtBQUNBLFVBQUlFLE9BQU9DLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQzVCLFVBQXJDLEVBQWlEd0IsS0FBakQsQ0FBSixFQUE2RDtBQUMzREEsZ0JBQVF4QixXQUFXd0IsS0FBWCxDQUFSO0FBQ0Q7O0FBRUQsVUFBSUssaUJBQWlCVixhQUFhLEVBQWxDO0FBQ0EsVUFBSUQsR0FBSixFQUFTO0FBQ1BXLHlCQUFpQixDQUFHQSxjQUFILGdCQUE0QnJCLFFBQVFVLEdBQVIsQ0FBNUIsUUFBNENZLElBQTVDLEVBQWpCO0FBQ0Q7O0FBRUQsYUFDRTtBQUFDLFdBQUQ7QUFBQSxtQkFBSyxXQUFXRCxjQUFoQixFQUFnQyxRQUFRVCxJQUF4QyxFQUE4QyxPQUFPQSxJQUFyRCxJQUErREgsS0FBL0Q7QUFDRTtBQUFDLGFBQUQ7QUFBQTtBQUNFLGdCQUFHLE1BREw7QUFFRSxtQkFBT0ksUUFGVDtBQUdFLG9CQUFRQSxRQUhWO0FBSUUscUJBQVEsYUFKVjtBQUtFLHdCQUFXLFFBTGI7QUFNRSw0QkFBZSxRQU5qQjtBQU9FLG1CQUFPRztBQVBUO0FBU0dGO0FBVEg7QUFERixPQURGO0FBZUQ7Ozs7RUF2RCtCMUIsYTs7QUFBYm9CLEksQ0FDWmUsUyxnQkFDRmpDLElBQUlpQyxTO0FBQ1BiLE9BQUtyQixVQUFVbUMsS0FBVixDQUFnQlAsT0FBT1EsSUFBUCxDQUFZekIsT0FBWixDQUFoQixFQUFzQzBCLFU7QUFDM0NkLFFBQU12QixVQUFVc0MsTTtBQUNoQmQsWUFBVXhCLFVBQVVzQzs7QUFMSG5CLEksQ0FRWm9CLFksR0FBZTtBQUNwQlosU0FBTyxTQURhO0FBRXBCTixPQUFLLE1BRmU7QUFHcEJtQixNQUFJLE1BSGdCO0FBSXBCQyxXQUFTLGFBSlc7QUFLcEJDLGNBQVksUUFMUTtBQU1wQkMsa0JBQWdCLFFBTkk7QUFPcEJwQixRQUFNLEVBUGM7QUFRcEJDLFlBQVU7QUFSVSxDO2VBUkhMLEkiLCJmaWxlIjoiSWNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgQm94IGZyb20gJ3VpLWJveCdcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uL2NvbG9ycydcblxuY29uc3QgSWNvbkNvbG9ycyA9IHtcbiAgZGVmYXVsdDogY29sb3JzLm5ldXRyYWxbJzIwMEEnXSxcbiAgZGlzYWJsZWQ6IGNvbG9ycy5uZXV0cmFsWyc1MEEnXSxcbiAgbXV0ZWQ6IGNvbG9ycy5uZXV0cmFsWyc2MEEnXSxcbiAgc2VsZWN0ZWQ6IGNvbG9ycy5ibHVlWyc1MDAnXSxcbiAgd2hpdGU6IGNvbG9ycy53aGl0ZVsnNTAwJ11cbn1cblxuY29uc3QgSWNvbkFpbSA9IHtcbiAgbm9uZTogbnVsbCxcbiAgdG9wOiAnMGRlZycsXG4gIHVwOiAnMGRlZycsXG4gIHJpZ2h0OiAnOTBkZWcnLFxuICBib3R0b206ICcxODBkZWcnLFxuICBkb3duOiAnMTgwZGVnJyxcbiAgbGVmdDogJzI3MGRlZydcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbiBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLkJveC5wcm9wVHlwZXMsXG4gICAgYWltOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoSWNvbkFpbSkpLmlzUmVxdWlyZWQsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBpY29uU2l6ZTogUHJvcFR5cGVzLm51bWJlclxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjb2xvcjogJ2RlZmF1bHQnLFxuICAgIGFpbTogJ25vbmUnLFxuICAgIGlzOiAnc3BhbicsXG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgc2l6ZTogMzIsXG4gICAgaWNvblNpemU6IDE2XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgYWltLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgc2l6ZSxcbiAgICAgIGljb25TaXplLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb2xvcjogY29sb3JQcm9wLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgbGV0IGNvbG9yID0gY29sb3JQcm9wXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChJY29uQ29sb3JzLCBjb2xvcikpIHtcbiAgICAgIGNvbG9yID0gSWNvbkNvbG9yc1tjb2xvcl1cbiAgICB9XG5cbiAgICBsZXQgdG90YWxUcmFuc2Zvcm0gPSB0cmFuc2Zvcm0gfHwgJydcbiAgICBpZiAoYWltKSB7XG4gICAgICB0b3RhbFRyYW5zZm9ybSA9IGAke3RvdGFsVHJhbnNmb3JtfSByb3RhdGUoJHtJY29uQWltW2FpbV19KWAudHJpbSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggdHJhbnNmb3JtPXt0b3RhbFRyYW5zZm9ybX0gaGVpZ2h0PXtzaXplfSB3aWR0aD17c2l6ZX0gey4uLnByb3BzfT5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGlzPVwic3BhblwiXG4gICAgICAgICAgd2lkdGg9e2ljb25TaXplfVxuICAgICAgICAgIGhlaWdodD17aWNvblNpemV9XG4gICAgICAgICAgZGlzcGxheT1cImlubGluZS1mbGV4XCJcbiAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfVxufVxuIl19