var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import SegmentedControlAppearances from './styles/SegmentedControlAppearances';
import SegmentedControlRadio from './SegmentedControlRadio';

var keysSegmentedControlAppearances = Object.keys(SegmentedControlAppearances);
var radioCount = 1; // Used for generating unique input names

var SegmentedControl = function (_PureComponent) {
  _inherits(SegmentedControl, _PureComponent);

  function SegmentedControl(props, context) {
    _classCallCheck(this, SegmentedControl);

    var _this = _possibleConstructorReturn(this, (SegmentedControl.__proto__ || Object.getPrototypeOf(SegmentedControl)).call(this, props, context));

    _this.handleChange = function (value) {
      // Save a render cycle when it's a controlled input
      if (!_this.props.value) {
        _this.setState({ value: value });
      }

      if (_this.props.onChange) {
        _this.props.onChange(value);
      }
    };

    _this.state = {
      value: props.defaultValue || props.options[0].value
    };

    _this.name = 'SegmentedControl-' + radioCount;
    radioCount += 1;
    return _this;
  }

  _createClass(SegmentedControl, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          name = _props.name,
          height = _props.height,
          options = _props.options,
          onChange = _props.onChange,
          appearance = _props.appearance,
          defaultValue = _props.defaultValue,
          props = _objectWithoutProperties(_props, ['name', 'height', 'options', 'onChange', 'appearance', 'defaultValue']);

      // Allows it to behave like a controlled input


      var value = this.props.value || this.state.value;
      return React.createElement(
        Box,
        _extends({ display: 'flex', marginRight: -1, height: height }, props),
        options.map(function (option, index) {
          return React.createElement(SegmentedControlRadio, {
            key: option.value,
            name: name,
            label: option.label,
            value: option.value,
            height: height,
            checked: value === option.value,
            onChange: _this2.handleChange,
            appearance: appearance,
            isFirstItem: index === 0,
            isLastItem: index === options.length - 1
          });
        })
      );
    }
  }]);

  return SegmentedControl;
}(PureComponent);

SegmentedControl.propTypes = _extends({}, Box.propTypes, {
  appearance: PropTypes.oneOf(keysSegmentedControlAppearances),
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.node.isRequired,
    value: PropTypes.string.isRequired
  })).isRequired,
  name: PropTypes.string,
  value: PropTypes.string,
  height: PropTypes.number,
  onChange: PropTypes.func,
  defaultValue: PropTypes.string
});
SegmentedControl.defaultProps = {
  height: 32,
  appearance: 'default'
};
export default SegmentedControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWdtZW50ZWQtY29udHJvbC9zcmMvU2VnbWVudGVkQ29udHJvbC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJCb3giLCJTZWdtZW50ZWRDb250cm9sQXBwZWFyYW5jZXMiLCJTZWdtZW50ZWRDb250cm9sUmFkaW8iLCJrZXlzU2VnbWVudGVkQ29udHJvbEFwcGVhcmFuY2VzIiwiT2JqZWN0Iiwia2V5cyIsInJhZGlvQ291bnQiLCJTZWdtZW50ZWRDb250cm9sIiwicHJvcHMiLCJjb250ZXh0IiwiaGFuZGxlQ2hhbmdlIiwidmFsdWUiLCJzZXRTdGF0ZSIsIm9uQ2hhbmdlIiwic3RhdGUiLCJkZWZhdWx0VmFsdWUiLCJvcHRpb25zIiwibmFtZSIsImhlaWdodCIsImFwcGVhcmFuY2UiLCJtYXAiLCJvcHRpb24iLCJpbmRleCIsImxhYmVsIiwibGVuZ3RoIiwicHJvcFR5cGVzIiwib25lT2YiLCJhcnJheU9mIiwic2hhcGUiLCJub2RlIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsIm51bWJlciIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsUUFBaEI7QUFDQSxPQUFPQywyQkFBUCxNQUF3QyxzQ0FBeEM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQyx5QkFBbEM7O0FBRUEsSUFBTUMsa0NBQWtDQyxPQUFPQyxJQUFQLENBQVlKLDJCQUFaLENBQXhDO0FBQ0EsSUFBSUssYUFBYSxDQUFqQixDLENBQW1COztJQUVFQyxnQjs7O0FBc0JuQiw0QkFBWUMsS0FBWixFQUFtQkMsT0FBbkIsRUFBNEI7QUFBQTs7QUFBQSxvSUFDcEJELEtBRG9CLEVBQ2JDLE9BRGE7O0FBQUEsVUFXNUJDLFlBWDRCLEdBV2IsaUJBQVM7QUFDdEI7QUFDQSxVQUFJLENBQUMsTUFBS0YsS0FBTCxDQUFXRyxLQUFoQixFQUF1QjtBQUNyQixjQUFLQyxRQUFMLENBQWMsRUFBRUQsWUFBRixFQUFkO0FBQ0Q7O0FBRUQsVUFBSSxNQUFLSCxLQUFMLENBQVdLLFFBQWYsRUFBeUI7QUFDdkIsY0FBS0wsS0FBTCxDQUFXSyxRQUFYLENBQW9CRixLQUFwQjtBQUNEO0FBQ0YsS0FwQjJCOztBQUcxQixVQUFLRyxLQUFMLEdBQWE7QUFDWEgsYUFBT0gsTUFBTU8sWUFBTixJQUFzQlAsTUFBTVEsT0FBTixDQUFjLENBQWQsRUFBaUJMO0FBRG5DLEtBQWI7O0FBSUEsVUFBS00sSUFBTCx5QkFBZ0NYLFVBQWhDO0FBQ0FBLGtCQUFjLENBQWQ7QUFSMEI7QUFTM0I7Ozs7NkJBYVE7QUFBQTs7QUFBQSxtQkFTSCxLQUFLRSxLQVRGO0FBQUEsVUFFTFMsSUFGSyxVQUVMQSxJQUZLO0FBQUEsVUFHTEMsTUFISyxVQUdMQSxNQUhLO0FBQUEsVUFJTEYsT0FKSyxVQUlMQSxPQUpLO0FBQUEsVUFLTEgsUUFMSyxVQUtMQSxRQUxLO0FBQUEsVUFNTE0sVUFOSyxVQU1MQSxVQU5LO0FBQUEsVUFPTEosWUFQSyxVQU9MQSxZQVBLO0FBQUEsVUFRRlAsS0FSRTs7QUFXUDs7O0FBQ0EsVUFBTUcsUUFBUSxLQUFLSCxLQUFMLENBQVdHLEtBQVgsSUFBb0IsS0FBS0csS0FBTCxDQUFXSCxLQUE3QztBQUNBLGFBQ0U7QUFBQyxXQUFEO0FBQUEsbUJBQUssU0FBUSxNQUFiLEVBQW9CLGFBQWEsQ0FBQyxDQUFsQyxFQUFxQyxRQUFRTyxNQUE3QyxJQUF5RFYsS0FBekQ7QUFDR1EsZ0JBQVFJLEdBQVIsQ0FBWSxVQUFDQyxNQUFELEVBQVNDLEtBQVQ7QUFBQSxpQkFDWCxvQkFBQyxxQkFBRDtBQUNFLGlCQUFLRCxPQUFPVixLQURkO0FBRUUsa0JBQU1NLElBRlI7QUFHRSxtQkFBT0ksT0FBT0UsS0FIaEI7QUFJRSxtQkFBT0YsT0FBT1YsS0FKaEI7QUFLRSxvQkFBUU8sTUFMVjtBQU1FLHFCQUFTUCxVQUFVVSxPQUFPVixLQU41QjtBQU9FLHNCQUFVLE9BQUtELFlBUGpCO0FBUUUsd0JBQVlTLFVBUmQ7QUFTRSx5QkFBYUcsVUFBVSxDQVR6QjtBQVVFLHdCQUFZQSxVQUFVTixRQUFRUSxNQUFSLEdBQWlCO0FBVnpDLFlBRFc7QUFBQSxTQUFaO0FBREgsT0FERjtBQWtCRDs7OztFQTNFMkMxQixhOztBQUF6QlMsZ0IsQ0FDWmtCLFMsZ0JBQ0Z6QixJQUFJeUIsUztBQUNQTixjQUFZcEIsVUFBVTJCLEtBQVYsQ0FBZ0J2QiwrQkFBaEIsQztBQUNaYSxXQUFTakIsVUFBVTRCLE9BQVYsQ0FDUDVCLFVBQVU2QixLQUFWLENBQWdCO0FBQ2RMLFdBQU94QixVQUFVOEIsSUFBVixDQUFlQyxVQURSO0FBRWRuQixXQUFPWixVQUFVZ0MsTUFBVixDQUFpQkQ7QUFGVixHQUFoQixDQURPLEVBS1BBLFU7QUFDRmIsUUFBTWxCLFVBQVVnQyxNO0FBQ2hCcEIsU0FBT1osVUFBVWdDLE07QUFDakJiLFVBQVFuQixVQUFVaUMsTTtBQUNsQm5CLFlBQVVkLFVBQVVrQyxJO0FBQ3BCbEIsZ0JBQWNoQixVQUFVZ0M7O0FBZFB4QixnQixDQWlCWjJCLFksR0FBZTtBQUNwQmhCLFVBQVEsRUFEWTtBQUVwQkMsY0FBWTtBQUZRLEM7ZUFqQkhaLGdCIiwiZmlsZSI6IlNlZ21lbnRlZENvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgU2VnbWVudGVkQ29udHJvbEFwcGVhcmFuY2VzIGZyb20gJy4vc3R5bGVzL1NlZ21lbnRlZENvbnRyb2xBcHBlYXJhbmNlcydcbmltcG9ydCBTZWdtZW50ZWRDb250cm9sUmFkaW8gZnJvbSAnLi9TZWdtZW50ZWRDb250cm9sUmFkaW8nXG5cbmNvbnN0IGtleXNTZWdtZW50ZWRDb250cm9sQXBwZWFyYW5jZXMgPSBPYmplY3Qua2V5cyhTZWdtZW50ZWRDb250cm9sQXBwZWFyYW5jZXMpXG5sZXQgcmFkaW9Db3VudCA9IDEgLy8gVXNlZCBmb3IgZ2VuZXJhdGluZyB1bmlxdWUgaW5wdXQgbmFtZXNcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGVkQ29udHJvbCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLkJveC5wcm9wVHlwZXMsXG4gICAgYXBwZWFyYW5jZTogUHJvcFR5cGVzLm9uZU9mKGtleXNTZWdtZW50ZWRDb250cm9sQXBwZWFyYW5jZXMpLFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgICAgIH0pXG4gICAgKS5pc1JlcXVpcmVkLFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaGVpZ2h0OiAzMixcbiAgICBhcHBlYXJhbmNlOiAnZGVmYXVsdCdcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCBwcm9wcy5vcHRpb25zWzBdLnZhbHVlXG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gYFNlZ21lbnRlZENvbnRyb2wtJHtyYWRpb0NvdW50fWBcbiAgICByYWRpb0NvdW50ICs9IDFcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IHZhbHVlID0+IHtcbiAgICAvLyBTYXZlIGEgcmVuZGVyIGN5Y2xlIHdoZW4gaXQncyBhIGNvbnRyb2xsZWQgaW5wdXRcbiAgICBpZiAoIXRoaXMucHJvcHMudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLFxuICAgICAgaGVpZ2h0LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgYXBwZWFyYW5jZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIC8vIEFsbG93cyBpdCB0byBiZWhhdmUgbGlrZSBhIGNvbnRyb2xsZWQgaW5wdXRcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5zdGF0ZS52YWx1ZVxuICAgIHJldHVybiAoXG4gICAgICA8Qm94IGRpc3BsYXk9XCJmbGV4XCIgbWFyZ2luUmlnaHQ9ey0xfSBoZWlnaHQ9e2hlaWdodH0gey4uLnByb3BzfT5cbiAgICAgICAge29wdGlvbnMubWFwKChvcHRpb24sIGluZGV4KSA9PiAoXG4gICAgICAgICAgPFNlZ21lbnRlZENvbnRyb2xSYWRpb1xuICAgICAgICAgICAga2V5PXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgbGFiZWw9e29wdGlvbi5sYWJlbH1cbiAgICAgICAgICAgIHZhbHVlPXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICAgIGNoZWNrZWQ9e3ZhbHVlID09PSBvcHRpb24udmFsdWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfVxuICAgICAgICAgICAgaXNGaXJzdEl0ZW09e2luZGV4ID09PSAwfVxuICAgICAgICAgICAgaXNMYXN0SXRlbT17aW5kZXggPT09IG9wdGlvbnMubGVuZ3RoIC0gMX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfVxufVxuIl19